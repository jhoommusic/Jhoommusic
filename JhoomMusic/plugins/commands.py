from pyrogram import filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery

from JhoomMusic import app
from config import BANNED_USERS, BOT_NAME, SUPPORT_CHAT, SUPPORT_CHANNEL

# Exact command categories as per your COMMAND_DETAILS
COMMAND_CATEGORIES = {
    "sultan": {
        "title": "üëë SULTAN COMMANDS",
        "description": "MUSIC PLAYBACK CONTROLS",
        "commands": {
            "/pause": "‚è∏Ô∏è PAUSE CURRENT PLAYING STREAM",
            "/resume": "‚ñ∂Ô∏è RESUME PAUSED STREAM", 
            "/skip": "‚è≠Ô∏è SKIP TO NEXT TRACK IN QUEUE",
            "/stop": "‚èπÔ∏è CLEAN QUEUE AND END STREAM",
            "/player": "üéõÔ∏è GET INTERACTIVE PLAYER PANEL",
            "/end": "üîö END THE STREAM",
            "/queue": "üìã SHOW QUEUED TRACKS LIST"
        }
    },
    "licence": {
        "title": "üîê LICENCE COMMANDS",
        "description": "USER AUTHORIZATION SYSTEM",
        "commands": {
            "/auth user_id": "‚úÖ ADD USER TO AUTH LIST",
            "/unauth user_id": "‚ùå REMOVE USER FROM AUTH LIST",
            "/authusers": "üë• SHOWS LIST OF AUTH USERS"
        }
    },
    "broadcast": {
        "title": "üì¢ BROADCAST COMMANDS",
        "description": "MESSAGE BROADCASTING SYSTEM",
        "commands": {
            "/broadcast text": "üì° BROADCAST TO ALL CHATS",
            "/broadcast -pin": "üìå PIN BROADCASTED MESSAGES",
            "/broadcast -pinloud": "üîä PIN WITH NOTIFICATION",
            "/broadcast -user": "üë§ BROADCAST TO USERS",
            "/broadcast -assistant": "ü§ñ BROADCAST FROM ASSISTANT",
            "/broadcast -nobot": "üö´ FORCE BOT TO NOT BROADCAST"
        }
    },
    "bl_chat": {
        "title": "üö´ BL-CHAT COMMANDS", 
        "description": "CHAT BLACKLIST MANAGEMENT",
        "commands": {
            "/blacklistchat chat_id": "üö´ BLACKLIST CHAT",
            "/whitelistchat chat_id": "‚úÖ WHITELIST CHAT",
            "/blacklistedchat": "üìã SHOWS BLACKLISTED CHATS"
        }
    },
    "bl_user": {
        "title": "üö´ BL-USER COMMANDS",
        "description": "USER BLOCKING SYSTEM", 
        "commands": {
            "/block username": "üîí BLOCK USER FROM BOT",
            "/unblock username": "üîì UNBLOCK USER",
            "/blockedusers": "üìã SHOWS BLOCKED USERS LIST"
        }
    },
    "ch_play": {
        "title": "üì∫ CH-PLAY COMMANDS",
        "description": "CHANNEL STREAMING CONTROLS",
        "commands": {
            "/cplay": "üéµ STREAM AUDIO IN CHANNEL",
            "/cvplay": "üé¨ STREAM VIDEO IN CHANNEL", 
            "/cplayforce": "‚ö° FORCE PLAY NEW TRACK",
            "/channelplay": "üì∫ CONNECT CHANNEL TO GROUP"
        }
    },
    "g_bans": {
        "title": "üåç G-BANS COMMANDS",
        "description": "GLOBAL BAN SYSTEM",
        "commands": {
            "/gban user_id": "üö´ GLOBALLY BAN USER",
            "/ungban user_id": "‚úÖ REMOVE GLOBAL BAN", 
            "/gbannedusers": "üìã SHOW GLOBALLY BANNED USERS"
        }
    },
    "spiral": {
        "title": "üåÄ SPIRAL COMMANDS",
        "description": "LOOPING CONTROLS",
        "commands": {
            "/loop enable/disable": "üîÅ TOGGLE LOOP",
            "/loop 1/2/3": "üî¢ SET LOOP COUNT"
        }
    },
    "revamp": {
        "title": "üîß REVAMP COMMANDS", 
        "description": "MAINTENANCE CONTROLS",
        "commands": {
            "/logs": "üìù GET BOT LOGS",
            "/logger": "üìä TOGGLE ACTIVITY LOGGING",
            "/maintenance": "üõ†Ô∏è TOGGLE MAINTENANCE MODE"
        }
    },
    "ping": {
        "title": "üèì PING COMMANDS",
        "description": "BOT STATUS SYSTEM", 
        "commands": {
            "/ping": "üèì SHOW BOT PING AND STATS",
            "/stats": "üìä SHOW BOT STATISTICS",
            "/uptime": "‚è∞ SHOW BOT UPTIME"
        }
    },
    "play": {
        "title": "üéµ PLAY COMMANDS",
        "description": "MUSIC PLAYBACK SYSTEM",
        "commands": {
            "/play [song/URL]": "‚ñ∂Ô∏è PLAY MUSIC FROM YOUTUBE/SPOTIFY OR REPLY TO AUDIO FILE",
            "/vplay [video/URL]": "üé¨ PLAY VIDEOS FROM YOUTUBE", 
            "/pause": "‚è∏Ô∏è PAUSE CURRENT PLAYBACK",
            "/resume": "‚ñ∂Ô∏è RESUME PAUSED PLAYBACK",
            "/skip": "‚è≠Ô∏è SKIP TO NEXT TRACK IN QUEUE",
            "/stop": "‚èπÔ∏è STOP PLAYBACK AND CLEAR QUEUE",
            "/player": "üéõÔ∏è SHOW INTERACTIVE PLAYER PANEL",
            "/queue": "üìã SHOW CURRENT QUEUE",
            "/playlist": "üìã MANAGE YOUR PLAYLISTS",
            "/radio [search/play/stop/list]": "üìª CONTROL RADIO STREAMING"
        }
    },
    "shuffle": {
        "title": "üîÄ SHUFFLE COMMANDS",
        "description": "QUEUE MANAGEMENT",
        "commands": {
            "/shuffle": "üîÄ SHUFFLE THE QUEUE",
            "/queue": "üìã SHOW SHUFFLED QUEUE"
        }
    },
    "seek": {
        "title": "‚è© SEEK COMMANDS", 
        "description": "PLAYBACK POSITION CONTROL",
        "commands": {
            "/seek time-dur": "‚è© SEEK TO POSITION",
            "/seekback time-dur": "‚è™ SEEK BACKWARDS"
        }
    },
    "song": {
        "title": "üéµ SONG COMMANDS",
        "description": "TRACK DOWNLOAD SYSTEM",
        "commands": {
            "/song url/name": "üì• DOWNLOAD TRACK FROM YOUTUBE"
        }
    },
    "speed": {
        "title": "‚ö° SPEED COMMANDS",
        "description": "PLAYBACK SPEED CONTROLS", 
        "commands": {
            "/speed": "‚ö° ADJUST PLAYBACK SPEED IN GROUP",
            "/cSpeed": "‚ö° ADJUST SPEED IN CHANNEL"
        }
    },
    # Additional categories from your list
    "vplay": {
        "title": "üé¨ VPLAY COMMANDS",
        "description": "VIDEO STREAMING",
        "commands": {
            "/vplay": "üé¨ START VIDEO STREAM",
            "/vplayforce": "‚ö° FORCE NEW VIDEO STREAM"
        }
    },
    "troubleshoot": {
        "title": "üîß TROUBLESHOOT COMMANDS",
        "description": "SELF-REPAIR SYSTEM",
        "commands": {
            "/fixbot": "üîß REPAIR COMMON ISSUES",
            "/diagnose": "üîç CHECK BOT HEALTH", 
            "/fixproblem": "üõ†Ô∏è (ADMIN ONLY) REMOTE REPAIRS"
        }
    },
    "settings": {
        "title": "‚öôÔ∏è SETTINGS COMMANDS",
        "description": "USER PREFERENCES SYSTEM",
        "commands": {
            "/settings": "‚öôÔ∏è SHOW SETTINGS PANEL",
            "/settings volume [1-200]": "üîä SET PLAYBACK VOLUME",
            "/settings quality [low|medium|high]": "üéß SET STREAM QUALITY", 
            "/settings language [en|hi|etc]": "üåê SET BOT LANGUAGE",
            "/settings notifications [on|off]": "üîî TOGGLE NOTIFICATIONS"
        }
    },
    "radio": {
        "title": "üìª RADIO COMMANDS",
        "description": "FM RADIO SYSTEM",
        "commands": {
            "/radio search [query]": "üîç SEARCH RADIO STATIONS",
            "/radio play [ID]": "‚ñ∂Ô∏è PLAY RADIO STATION",
            "/radio stop": "‚èπÔ∏è STOP RADIO PLAYBACK",
            "/radio list": "üìã SHOW POPULAR STATIONS"
        }
    }
}

@app.on_message(filters.command(["commands", "cmd", "help"]) & ~BANNED_USERS)
async def show_commands(client, message: Message):
    """Show comprehensive command interface exactly like the image"""
    
    welcome_text = f"""
**COMMANDS OF {BOT_NAME.upper()} BOT**

**THERE ARE DIFFERENT TYPES OF COMMAND OF {BOT_NAME.upper()} SOME OF THEM ARE ONLY FOR ADMINS AND SOME OF THEM ARE FOR ELITEUSERS.**

**üîß HOW TO USE COMMANDS?**
‚îú **TAP ON BUTTON BELOW TO KNOW MORE.**
‚îú **CHECK FEATURES LIKE ELITEUSERS ETC.**
‚îî **/:- USE ALL FEATURES WITH THIS HANDLER.**

**üí° Note:** Make sure bot has admin permissions for full functionality.
"""
    
    # Create the exact button layout with SULTAN and LICENCE
    keyboard = [
        # First row - SULTAN, LICENCE, BROADCAST
        [
            InlineKeyboardButton("SULTAN", callback_data="cmd_sultan"),
            InlineKeyboardButton("LICENCE", callback_data="cmd_licence"),
            InlineKeyboardButton("BROADCAST", callback_data="cmd_broadcast")
        ],
        # Second row - BL-CHAT, BL-USER, CH-PLAY
        [
            InlineKeyboardButton("BL-CHAT", callback_data="cmd_bl_chat"),
            InlineKeyboardButton("BL-USER", callback_data="cmd_bl_user"),
            InlineKeyboardButton("CH-PLAY", callback_data="cmd_ch_play")
        ],
        # Third row - G-BANS, SPIRAL, REVAMP
        [
            InlineKeyboardButton("G-BANS", callback_data="cmd_g_bans"),
            InlineKeyboardButton("SPIRAL", callback_data="cmd_spiral"),
            InlineKeyboardButton("REVAMP", callback_data="cmd_revamp")
        ],
        # Fourth row - PING, PLAY, SHUFFLE
        [
            InlineKeyboardButton("PING", callback_data="cmd_ping"),
            InlineKeyboardButton("PLAY", callback_data="cmd_play"),
            InlineKeyboardButton("SHUFFLE", callback_data="cmd_shuffle")
        ],
        # Fifth row - SEEK, SONG, SPEED
        [
            InlineKeyboardButton("SEEK", callback_data="cmd_seek"),
            InlineKeyboardButton("SONG", callback_data="cmd_song"),
            InlineKeyboardButton("SPEED", callback_data="cmd_speed")
        ],
        # Back button
        [
            InlineKeyboardButton("BACK", callback_data="back_to_main")
        ]
    ]
    
    await message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Callback handlers for each command category
@app.on_callback_query(filters.regex(r"cmd_(.+)"))
async def handle_command_category(client, callback_query: CallbackQuery):
    """Handle command category callbacks"""
    category = callback_query.data.split("_")[1]
    
    if category in COMMAND_CATEGORIES:
        cat_info = COMMAND_CATEGORIES[category]
        
        # Build command list text exactly as per your format
        command_text = f"**{cat_info['title']}**\n\n"
        command_text += f"**{cat_info['description']}**\n\n"
        
        for cmd, desc in cat_info['commands'].items():
            command_text += f"**{cmd}** :- {desc}\n"
        
        # Create back button
        keyboard = [
            [InlineKeyboardButton("üîô BACK TO COMMANDS", callback_data="back_to_commands")],
            [InlineKeyboardButton("üè† MAIN MENU", callback_data="back_to_main")]
        ]
        
        await callback_query.message.edit_text(
            command_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await callback_query.answer("Category not found!", show_alert=True)

@app.on_callback_query(filters.regex("back_to_commands"))
async def back_to_commands(client, callback_query: CallbackQuery):
    """Go back to main commands interface"""
    
    welcome_text = f"""
**COMMANDS OF {BOT_NAME.upper()} BOT**

**THERE ARE DIFFERENT TYPES OF COMMAND OF {BOT_NAME.upper()} SOME OF THEM ARE ONLY FOR ADMINS AND SOME OF THEM ARE FOR ELITEUSERS.**

**üîß HOW TO USE COMMANDS?**
‚îú **TAP ON BUTTON BELOW TO KNOW MORE.**
‚îú **CHECK FEATURES LIKE ELITEUSERS ETC.**
‚îî **/:- USE ALL FEATURES WITH THIS HANDLER.**

**üí° Note:** Make sure bot has admin permissions for full functionality.
"""
    
    # Create the exact button layout with SULTAN and LICENCE
    keyboard = [
        # First row - SULTAN, LICENCE, BROADCAST
        [
            InlineKeyboardButton("SULTAN", callback_data="cmd_sultan"),
            InlineKeyboardButton("LICENCE", callback_data="cmd_licence"),
            InlineKeyboardButton("BROADCAST", callback_data="cmd_broadcast")
        ],
        # Second row - BL-CHAT, BL-USER, CH-PLAY
        [
            InlineKeyboardButton("BL-CHAT", callback_data="cmd_bl_chat"),
            InlineKeyboardButton("BL-USER", callback_data="cmd_bl_user"),
            InlineKeyboardButton("CH-PLAY", callback_data="cmd_ch_play")
        ],
        # Third row - G-BANS, SPIRAL, REVAMP
        [
            InlineKeyboardButton("G-BANS", callback_data="cmd_g_bans"),
            InlineKeyboardButton("SPIRAL", callback_data="cmd_spiral"),
            InlineKeyboardButton("REVAMP", callback_data="cmd_revamp")
        ],
        # Fourth row - PING, PLAY, SHUFFLE
        [
            InlineKeyboardButton("PING", callback_data="cmd_ping"),
            InlineKeyboardButton("PLAY", callback_data="cmd_play"),
            InlineKeyboardButton("SHUFFLE", callback_data="cmd_shuffle")
        ],
        # Fifth row - SEEK, SONG, SPEED
        [
            InlineKeyboardButton("SEEK", callback_data="cmd_seek"),
            InlineKeyboardButton("SONG", callback_data="cmd_song"),
            InlineKeyboardButton("SPEED", callback_data="cmd_speed")
        ],
        # Back button
        [
            InlineKeyboardButton("BACK", callback_data="back_to_main")
        ]
    ]
    
    await callback_query.message.edit_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Quick access commands
@app.on_message(filters.command(["quickhelp", "qhelp"]) & ~BANNED_USERS)
async def quick_help(client, message: Message):
    """Show quick help with essential commands"""
    
    quick_text = f"""
**‚ö° QUICK HELP - {BOT_NAME}**

**üéµ Essential Commands:**
‚Ä¢ `/play <song>` - Play music
‚Ä¢ `/pause` - Pause playback
‚Ä¢ `/resume` - Resume playback
‚Ä¢ `/skip` - Skip current song
‚Ä¢ `/stop` - Stop and clear queue

**üëë Admin Commands:**
‚Ä¢ `/auth <user>` - Authorize user
‚Ä¢ `/mute` - Mute assistant
‚Ä¢ `/clearqueue` - Clear queue

**üìä Info Commands:**
‚Ä¢ `/ping` - Check bot status
‚Ä¢ `/queue` - Show current queue

**Need more commands?** Use `/commands` for full list!
"""
    
    keyboard = [
        [
            InlineKeyboardButton("üìã All Commands", callback_data="back_to_commands"),
            InlineKeyboardButton("üÜò Support", url=SUPPORT_CHAT)
        ]
    ]
    
    await message.reply_text(
        quick_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Command search functionality
@app.on_message(filters.command(["search_cmd", "findcmd"]) & ~BANNED_USERS)
async def search_command(client, message: Message):
    """Search for specific commands"""
    
    if len(message.command) < 2:
        return await message.reply_text(
            "**Usage:** `/search_cmd <keyword>`\n\n"
            "**Example:** `/search_cmd play`"
        )
    
    keyword = " ".join(message.command[1:]).lower()
    found_commands = []
    
    # Search through all command categories
    for category, cat_info in COMMAND_CATEGORIES.items():
        for cmd, desc in cat_info['commands'].items():
            if keyword in cmd.lower() or keyword in desc.lower():
                found_commands.append(f"**{cmd}** - {desc}")
    
    if found_commands:
        result_text = f"**üîç Search Results for '{keyword}':**\n\n"
        result_text += "\n".join(found_commands[:10])  # Limit to 10 results
        
        if len(found_commands) > 10:
            result_text += f"\n\n**... and {len(found_commands) - 10} more results**"
    else:
        result_text = f"**‚ùå No commands found for '{keyword}'**\n\nTry searching with different keywords."
    
    keyboard = [
        [InlineKeyboardButton("üìã All Commands", callback_data="back_to_commands")]
    ]
    
    await message.reply_text(
        result_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )