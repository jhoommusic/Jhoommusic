from pyrogram import filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery

from JhoomMusic import app
from config import BANNED_USERS, BOT_NAME, SUPPORT_CHAT, SUPPORT_CHANNEL

# Complete command categories with all 47 commands from your list
COMMAND_CATEGORIES = {
    "sultan": {
        "title": "üëë SULTAN COMMANDS",
        "description": "OWNER & SUDO USER CONTROLS",
        "commands": {
            "/auth [user_id]": "‚úÖ AUTHORIZE A USER",
            "/unauth [user_id]": "‚ùå REMOVE USER AUTHORIZATION", 
            "/authusers": "üë• LIST AUTHORIZED USERS",
            "/broadcast [message]": "üì° SEND MESSAGE TO ALL CHATS",
            "/gban [user_id]": "üö´ GLOBALLY BAN A USER",
            "/ungban [user_id]": "‚úÖ REMOVE GLOBAL BAN",
            "/gbannedusers": "üìã LIST GLOBALLY BANNED USERS",
            "/maintenance": "üõ†Ô∏è TOGGLE MAINTENANCE MODE",
            "/logs": "üìù GET BOT LOGS (SUDO-ONLY)",
            "/restart": "üîÑ RESTART THE BOT",
            "/revamp": "üîß BOT MAINTENANCE CONTROLS"
        }
    },
    "licence": {
        "title": "üîê LICENCE COMMANDS", 
        "description": "USER AUTHORIZATION SYSTEM",
        "commands": {
            "/auth [user_id]": "‚úÖ AUTHORIZE A USER",
            "/unauth [user_id]": "‚ùå REMOVE USER AUTHORIZATION",
            "/authusers": "üë• LIST AUTHORIZED USERS",
            "/settings": "‚öôÔ∏è OPEN SETTINGS MENU",
            "/settings volume [1-200]": "üîä ADJUST PLAYBACK VOLUME",
            "/settings quality [low/medium/high]": "üéß CHANGE STREAM QUALITY",
            "/settings language [en/hi/etc]": "üåê CHANGE BOT LANGUAGE",
            "/settings notifications [on/off]": "üîî TOGGLE NOTIFICATIONS"
        }
    },
    "broadcast": {
        "title": "üì¢ BROADCAST COMMANDS",
        "description": "MESSAGE BROADCASTING SYSTEM", 
        "commands": {
            "/broadcast [message]": "üì° SEND MESSAGE TO ALL CHATS",
            "/stats": "üìä SHOW BOT STATISTICS",
            "/uptime": "‚è∞ SHOW BOT UPTIME",
            "/ping": "üèì CHECK BOT RESPONSE TIME"
        }
    },
    "bl_chat": {
        "title": "üö´ BL-CHAT COMMANDS",
        "description": "CHAT BLACKLIST MANAGEMENT",
        "commands": {
            "/blacklistchat [chat_id]": "üö´ BLACKLIST A CHAT",
            "/whitelistchat [chat_id]": "‚úÖ WHITELIST A CHAT", 
            "/blacklistedchat": "üìã SHOW BLACKLISTED CHATS"
        }
    },
    "bl_user": {
        "title": "üö´ BL-USER COMMANDS",
        "description": "USER BLACKLIST MANAGEMENT",
        "commands": {
            "/block [username]": "üîí BLOCK USER FROM BOT",
            "/unblock [username]": "üîì UNBLOCK USER"
        }
    },
    "ch_play": {
        "title": "üì∫ CH-PLAY COMMANDS",
        "description": "CHANNEL PLAYBACK CONTROLS",
        "commands": {
            "/cplay [query]": "‚ñ∂Ô∏è PLAY MUSIC IN CONNECTED CHANNEL",
            "/cvplay [query]": "üé¨ PLAY VIDEO IN CONNECTED CHANNEL",
            "/cplayforce [query]": "‚ö° FORCE PLAY NEW TRACK IN CHANNEL",
            "/channelplay": "üì∫ CONNECT CHANNEL TO GROUP"
        }
    },
    "g_bans": {
        "title": "üåç G-BANS COMMANDS",
        "description": "GLOBAL BAN MANAGEMENT SYSTEM",
        "commands": {
            "/gban [user_id]": "üö´ GLOBALLY BAN A USER",
            "/ungban [user_id]": "‚úÖ REMOVE GLOBAL BAN",
            "/gbannedusers": "üìã LIST GLOBALLY BANNED USERS"
        }
    },
    "spiral": {
        "title": "üåÄ SPIRAL COMMANDS",
        "description": "LOOP & REPEAT CONTROLS",
        "commands": {
            "/loop [enable/disable/1-10]": "üîÅ ENABLE/DISABLE LOOPING (TRACK OR QUEUE)"
        }
    },
    "revamp": {
        "title": "üîß REVAMP COMMANDS",
        "description": "BOT MAINTENANCE & REPAIR",
        "commands": {
            "/revamp": "üîß BOT MAINTENANCE CONTROLS",
            "/fixbot": "üîß REPAIR COMMON ISSUES (ADMIN-ONLY)",
            "/diagnose": "üîç RUN SYSTEM DIAGNOSTICS (ADMIN-ONLY)",
            "/logger": "üìù TOGGLE ACTIVITY LOGGING",
            "/maintenance": "üõ†Ô∏è TOGGLE MAINTENANCE MODE"
        }
    },
    "ping": {
        "title": "üèì PING COMMANDS",
        "description": "BOT STATUS & PERFORMANCE",
        "commands": {
            "/ping": "üèì CHECK BOT RESPONSE TIME",
            "/uptime": "‚è∞ SHOW BOT UPTIME",
            "/stats": "üìä SHOW BOT STATISTICS"
        }
    },
    "play": {
        "title": "üéµ PLAY COMMANDS",
        "description": "MUSIC PLAYBACK CONTROLS",
        "commands": {
            "/play [song/URL]": "‚ñ∂Ô∏è PLAY MUSIC FROM YOUTUBE/SPOTIFY OR REPLY TO AUDIO FILE",
            "/vplay [video/URL]": "üé¨ PLAY VIDEOS FROM YOUTUBE",
            "/pause": "‚è∏Ô∏è PAUSE CURRENT PLAYBACK",
            "/resume": "‚ñ∂Ô∏è RESUME PAUSED PLAYBACK",
            "/skip": "‚è≠Ô∏è SKIP TO NEXT TRACK IN QUEUE",
            "/stop": "‚èπÔ∏è STOP PLAYBACK AND CLEAR QUEUE",
            "/player": "üéõÔ∏è SHOW INTERACTIVE PLAYER PANEL",
            "/queue": "üìã SHOW CURRENT QUEUE",
            "/playlist": "üìã MANAGE YOUR PLAYLISTS",
            "/radio [search/play/stop/list]": "üìª CONTROL RADIO STREAMING"
        }
    },
    "shuffle": {
        "title": "üîÄ SHUFFLE COMMANDS",
        "description": "QUEUE MANAGEMENT CONTROLS",
        "commands": {
            "/shuffle": "üîÄ SHUFFLE THE CURRENT QUEUE",
            "/queue": "üìã SHOW CURRENT QUEUE"
        }
    },
    "seek": {
        "title": "‚è© SEEK COMMANDS",
        "description": "PLAYBACK POSITION CONTROLS",
        "commands": {
            "/seek [seconds]": "‚è© SEEK TO POSITION IN TRACK",
            "/seekback [seconds]": "‚è™ SEEK BACKWARD IN TRACK"
        }
    },
    "song": {
        "title": "üéµ SONG COMMANDS",
        "description": "SONG DOWNLOAD & INFO",
        "commands": {
            "/song [query/URL]": "üì• DOWNLOAD TRACK FROM YOUTUBE"
        }
    },
    "speed": {
        "title": "‚ö° SPEED COMMANDS",
        "description": "PLAYBACK SPEED CONTROLS",
        "commands": {
            "/speed": "‚ö° ADJUST PLAYBACK SPEED IN GROUP",
            "/cSpeed": "‚ö° ADJUST SPEED IN CHANNEL"
        }
    }
}

@app.on_message(filters.command(["commands", "cmd", "help"]) & ~BANNED_USERS)
async def show_commands(client, message: Message):
    """Show comprehensive command interface exactly like the image"""
    
    welcome_text = f"""
**COMMANDS OF {BOT_NAME.upper()} BOT**

**THERE ARE DIFFERENT TYPES OF COMMAND OF {BOT_NAME.upper()} SOME OF THEM ARE ONLY FOR ADMINS AND SOME OF THEM ARE FOR ELITEUSERS.**

**üîß HOW TO USE COMMANDS?**
‚îú **TAP ON BUTTON BELOW TO KNOW MORE.**
‚îú **CHECK FEATURES LIKE ELITEUSERS ETC.**
‚îî **/:- USE ALL FEATURES WITH THIS HANDLER.**

**üí° Note:** Some commands have alternative short forms (like `/p` for `/play`). Admin commands require sudo privileges.
"""
    
    # Create the exact button layout with SULTAN and LICENCE
    keyboard = [
        # First row - SULTAN, LICENCE, BROADCAST
        [
            InlineKeyboardButton("SULTAN", callback_data="cmd_sultan"),
            InlineKeyboardButton("LICENCE", callback_data="cmd_licence"),
            InlineKeyboardButton("BROADCAST", callback_data="cmd_broadcast")
        ],
        # Second row - BL-CHAT, BL-USER, CH-PLAY
        [
            InlineKeyboardButton("BL-CHAT", callback_data="cmd_bl_chat"),
            InlineKeyboardButton("BL-USER", callback_data="cmd_bl_user"),
            InlineKeyboardButton("CH-PLAY", callback_data="cmd_ch_play")
        ],
        # Third row - G-BANS, SPIRAL, REVAMP
        [
            InlineKeyboardButton("G-BANS", callback_data="cmd_g_bans"),
            InlineKeyboardButton("SPIRAL", callback_data="cmd_spiral"),
            InlineKeyboardButton("REVAMP", callback_data="cmd_revamp")
        ],
        # Fourth row - PING, PLAY, SHUFFLE
        [
            InlineKeyboardButton("PING", callback_data="cmd_ping"),
            InlineKeyboardButton("PLAY", callback_data="cmd_play"),
            InlineKeyboardButton("SHUFFLE", callback_data="cmd_shuffle")
        ],
        # Fifth row - SEEK, SONG, SPEED
        [
            InlineKeyboardButton("SEEK", callback_data="cmd_seek"),
            InlineKeyboardButton("SONG", callback_data="cmd_song"),
            InlineKeyboardButton("SPEED", callback_data="cmd_speed")
        ],
        # Back button
        [
            InlineKeyboardButton("BACK", callback_data="back_to_main")
        ]
    ]
    
    await message.reply_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Callback handlers for each command category
@app.on_callback_query(filters.regex(r"cmd_(.+)"))
async def handle_command_category(client, callback_query: CallbackQuery):
    """Handle command category callbacks"""
    category = callback_query.data.split("_")[1]
    
    if category in COMMAND_CATEGORIES:
        cat_info = COMMAND_CATEGORIES[category]
        
        # Build command list text
        command_text = f"**{cat_info['title']}**\n\n"
        command_text += f"**{cat_info['description']}**\n\n"
        
        for cmd, desc in cat_info['commands'].items():
            command_text += f"**{cmd}** :- {desc}\n"
        
        # Create back button
        keyboard = [
            [InlineKeyboardButton("üîô BACK TO COMMANDS", callback_data="back_to_commands")],
            [InlineKeyboardButton("üè† MAIN MENU", callback_data="back_to_main")]
        ]
        
        await callback_query.message.edit_text(
            command_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await callback_query.answer("Category not found!", show_alert=True)

@app.on_callback_query(filters.regex("back_to_commands"))
async def back_to_commands(client, callback_query: CallbackQuery):
    """Go back to main commands interface"""
    
    welcome_text = f"""
**COMMANDS OF {BOT_NAME.upper()} BOT**

**THERE ARE DIFFERENT TYPES OF COMMAND OF {BOT_NAME.upper()} SOME OF THEM ARE ONLY FOR ADMINS AND SOME OF THEM ARE FOR ELITEUSERS.**

**üîß HOW TO USE COMMANDS?**
‚îú **TAP ON BUTTON BELOW TO KNOW MORE.**
‚îú **CHECK FEATURES LIKE ELITEUSERS ETC.**
‚îî **/:- USE ALL FEATURES WITH THIS HANDLER.**

**üí° Note:** Some commands have alternative short forms (like `/p` for `/play`). Admin commands require sudo privileges.
"""
    
    # Create the exact button layout with SULTAN and LICENCE
    keyboard = [
        # First row - SULTAN, LICENCE, BROADCAST
        [
            InlineKeyboardButton("SULTAN", callback_data="cmd_sultan"),
            InlineKeyboardButton("LICENCE", callback_data="cmd_licence"),
            InlineKeyboardButton("BROADCAST", callback_data="cmd_broadcast")
        ],
        # Second row - BL-CHAT, BL-USER, CH-PLAY
        [
            InlineKeyboardButton("BL-CHAT", callback_data="cmd_bl_chat"),
            InlineKeyboardButton("BL-USER", callback_data="cmd_bl_user"),
            InlineKeyboardButton("CH-PLAY", callback_data="cmd_ch_play")
        ],
        # Third row - G-BANS, SPIRAL, REVAMP
        [
            InlineKeyboardButton("G-BANS", callback_data="cmd_g_bans"),
            InlineKeyboardButton("SPIRAL", callback_data="cmd_spiral"),
            InlineKeyboardButton("REVAMP", callback_data="cmd_revamp")
        ],
        # Fourth row - PING, PLAY, SHUFFLE
        [
            InlineKeyboardButton("PING", callback_data="cmd_ping"),
            InlineKeyboardButton("PLAY", callback_data="cmd_play"),
            InlineKeyboardButton("SHUFFLE", callback_data="cmd_shuffle")
        ],
        # Fifth row - SEEK, SONG, SPEED
        [
            InlineKeyboardButton("SEEK", callback_data="cmd_seek"),
            InlineKeyboardButton("SONG", callback_data="cmd_song"),
            InlineKeyboardButton("SPEED", callback_data="cmd_speed")
        ],
        # Back button
        [
            InlineKeyboardButton("BACK", callback_data="back_to_main")
        ]
    ]
    
    await callback_query.message.edit_text(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Quick access commands
@app.on_message(filters.command(["quickhelp", "qhelp"]) & ~BANNED_USERS)
async def quick_help(client, message: Message):
    """Show quick help with essential commands"""
    
    quick_text = f"""
**‚ö° QUICK HELP - {BOT_NAME}**

**üéµ Essential Music Commands:**
‚Ä¢ `/play [song/URL]` - Play music from YouTube/Spotify
‚Ä¢ `/vplay [video/URL]` - Play videos from YouTube
‚Ä¢ `/pause` - Pause current playback
‚Ä¢ `/resume` - Resume paused playback
‚Ä¢ `/skip` - Skip to next track in queue
‚Ä¢ `/stop` - Stop playback and clear queue
‚Ä¢ `/queue` - Show current queue

**üîß Troubleshooting Commands:**
‚Ä¢ `/fixbot` - Repair common issues (admin-only)
‚Ä¢ `/diagnose` - Run system diagnostics (admin-only)
‚Ä¢ `/ping` - Check bot response time

**‚öôÔ∏è Settings Commands:**
‚Ä¢ `/settings` - Open settings menu
‚Ä¢ `/settings volume [1-200]` - Adjust volume
‚Ä¢ `/settings quality [low/medium/high]` - Change quality

**Need more commands?** Use `/commands` for complete list!
"""
    
    keyboard = [
        [
            InlineKeyboardButton("üìã All Commands", callback_data="back_to_commands"),
            InlineKeyboardButton("üÜò Support", url=SUPPORT_CHAT)
        ]
    ]
    
    await message.reply_text(
        quick_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Command search functionality
@app.on_message(filters.command(["search_cmd", "findcmd"]) & ~BANNED_USERS)
async def search_command(client, message: Message):
    """Search for specific commands"""
    
    if len(message.command) < 2:
        return await message.reply_text(
            "**Usage:** `/search_cmd <keyword>`\n\n"
            "**Examples:**\n"
            "‚Ä¢ `/search_cmd play` - Find play commands\n"
            "‚Ä¢ `/search_cmd auth` - Find authorization commands\n"
            "‚Ä¢ `/search_cmd ban` - Find ban commands"
        )
    
    keyword = " ".join(message.command[1:]).lower()
    found_commands = []
    
    # Search through all command categories
    for category, cat_info in COMMAND_CATEGORIES.items():
        for cmd, desc in cat_info['commands'].items():
            if keyword in cmd.lower() or keyword in desc.lower():
                found_commands.append(f"**{cmd}** - {desc}")
    
    if found_commands:
        result_text = f"**üîç Search Results for '{keyword}':**\n\n"
        result_text += "\n".join(found_commands[:10])  # Limit to 10 results
        
        if len(found_commands) > 10:
            result_text += f"\n\n**... and {len(found_commands) - 10} more results**"
    else:
        result_text = f"**‚ùå No commands found for '{keyword}'**\n\nTry searching with different keywords like:\n‚Ä¢ play, pause, skip\n‚Ä¢ auth, ban, block\n‚Ä¢ settings, volume, quality"
    
    keyboard = [
        [InlineKeyboardButton("üìã All Commands", callback_data="back_to_commands")]
    ]
    
    await message.reply_text(
        result_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Alternative command triggers
@app.on_message(filters.command(["help"]) & ~BANNED_USERS)
async def help_redirect(client, message: Message):
    """Redirect help to commands"""
    await show_commands(client, message)

@app.on_message(filters.command(["start"]) & filters.private & ~BANNED_USERS)
async def start_private(client, message: Message):
    """Handle start in private chat"""
    start_text = f"""
üéµ **Welcome to {BOT_NAME}!**

I'm a powerful music bot that can play high-quality music in your Telegram groups!

**üî• Features:**
‚Ä¢ Play music from YouTube/Spotify
‚Ä¢ High quality audio streaming
‚Ä¢ Queue management
‚Ä¢ Admin controls
‚Ä¢ Live stream support
‚Ä¢ Video calls support

**üìö Quick Commands:**
‚Ä¢ `/play <song name>` - Play a song
‚Ä¢ `/commands` - Show all commands
‚Ä¢ `/help` - Get help

**üí° How to use:**
1. Add me to your group
2. Make me admin with necessary permissions
3. Use `/play <song name>` to start playing music!
"""
    
    keyboard = [
        [
            InlineKeyboardButton(
                "‚ûï Add me to your Group ‚ûï",
                url=f"https://t.me/{app.username}?startgroup=true",
            )
        ],
        [
            InlineKeyboardButton("üéµ Commands", callback_data="back_to_commands"),
            InlineKeyboardButton("‚ÑπÔ∏è About", callback_data="about_bot")
        ],
        [
            InlineKeyboardButton("üÜò Support", url=SUPPORT_CHAT),
            InlineKeyboardButton("üì¢ Updates", url=SUPPORT_CHANNEL),
        ]
    ]
    
    await message.reply_text(start_text, reply_markup=InlineKeyboardMarkup(keyboard))